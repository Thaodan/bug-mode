* bug-mode manual                                                     :TOC_4:
 - [[#known-issues-and-limitations][Known issues and limitations]]
 - [[#installation][Installation]]
   - [[#requirements][Requirements]]
 - [[#supported-backends][Supported backends]]
   - [[#bugzilla-json-rpc][Bugzilla JSON-RPC]]
   - [[#rally-rest-api][Rally REST API]]
 - [[#modes][Modes]]
   - [[#generic-modes][Generic modes]]
     - [[#bug-mode][bug-mode]]
       - [[#key-bindings][Key bindings]]
     - [[#bug-list-mode][bug-list-mode]]
       - [[#key-bindings-1][Key bindings]]
   - [[#rally-specific-modes][Rally specific modes]]
     - [[#bug-rally-subscription-mode][bug-rally-subscription-mode]]
 - [[#interactive-functions][Interactive functions]]
   - [[#bug-cache-clear][bug-cache-clear]]
   - [[#bug-login-bugzilla][bug-login (/Bugzilla/)]]
   - [[#bug-logout-bugzilla][bug-logout (/Bugzilla/)]]
   - [[#bug-open][bug-open]]
   - [[#bug-rally-subscription-rally][bug-rally-subscription (/Rally/)]]
   - [[#bug-search][bug-search]]
   - [[#bug-search-multiple-bugzilla][bug-search-multiple (/Bugzilla/)]]
   - [[#bug-stored-bugs][bug-stored-bugs]]
 - [[#customization][Customization]]
 - [[#org-mode-integration][org-mode integration]]
 - [[#proxy-use][Proxy use]]
   - [[#patch-url][Patch url]]
   - [[#use-port-forwarding][Use port forwarding]]
   - [[#use-a-proxy-aware-tls-program][Use a proxy aware TLS program]]
 - [[#rich-text-formatting][Rich text formatting]]
 - [[#related-modes-and-modules][Related modes and modules]]
   - [[#rally-mode][rally-mode]]
   - [[#bugz-mode][bugz-mode]]
   - [[#ghel][gh.el]]
   - [[#jira-rest][jira-rest]]

* Known issues and limitations
To get an overview of open issues, report bugs, or suggest improvements please visit the [[https://github.com/bwachter/bug-mode/issues][GitHub issue tracker]].

To report a bug, please first try if you can reproduce it. If you can, temporarily enable debug output for both bug-mode (=(setq bug-debug t)=) and url (=(setq url-debug t)=), reproduce the issue again, and include the contents of the =*bug-debug*= and =*URL-DEBUG*= buffers with your bug report. Make sure to replace the contents of /Authorization/ and /zsessionid/ headers before submission. Also include backtraces, if any.

* Installation
** Requirements
- [[http://cvs.savannah.gnu.org/viewvc/*checkout*/emacs/lisp/json.el?root=emacs][json.el]], which nowadays should be included in your copy of emacs already.
* Supported backends
** Bugzilla JSON-RPC
For historical reasons the API used for Bugzilla is the [[https://www.bugzilla.org/docs/4.0/en/html/api/Bugzilla/WebService/Server/JSONRPC.html][JSON-RPC API]], which has been deprecated. Currently this is used as default API if no bug tracker type has been configured. In the future it is expected to keep the JSON-RPC API for backwards compatibility with older instances, but implement the [[https://bugzilla.readthedocs.io/en/5.0/api/index.html][REST WebService API]] as additional backend for newer Bugzilla instances.

A Bugzilla instance >= 3.6 with JSON-RPC enabled is required.
** Rally REST API
For Rally REST/JSON based [[https://rally1.rallydev.com/slm/doc/webservice/][Web Services API]] in version 2 is implemented (the latest version at the moment of writing this manual).
* Modes
** Generic modes
*** bug-mode
     :PROPERTIES:
     :CUSTOM_ID: bug-mode
     :END:
=bug-mode= is used to display details for a single bug, either from a search result or by searching/[[#bug-open][opening a single bug]].

#+CAPTION: A single Rally bug
[[./rally-bug-from-search.png]]

**** Key bindings
- RET - open attachment with browse-url function
- b - open bug in default browser
- c - add comment (deprecated, will be removed)
- d - download attachment with w3m-download
- e - edit the field near point, if editable
- i - display information about thing at point (debug functionality)
- r - remember the bug in a locally stored list
- s - resolve the bug (deprecated, will be removed)
- u - execute query again and update bug buffer
- q - kill bug buffer
- C-c C-c - Commit changes made to the bug tracker

*** bug-list-mode
     :PROPERTIES:
     :CUSTOM_ID: bug-list-mode
     :END:
=bug-list-mode= is used to display a list of bugs, usually as a result of a search. Full bugs can be opened in =bug-mode= either from the keyboard by navigating to an entry and pressing =RET=, or by mouse using either the left or the middle button.

#+CAPTION: A search result of Rally bugs
[[./rally-bug-search-safari.png]]

**** Key bindings
- RET - open bug at point
- i - display information about thing at point (debug functionality)
- u - execute query again and update search buffer
- q - kill search buffer

** Rally specific modes
    :PROPERTIES:
    :CUSTOM_ID: bug-rally-subscription-mode
    :END:
*** bug-rally-subscription-mode
Use the =bug-rally-subscription= function to display details about your Rally subscription.
#+CAPTION: Sample output for a Rally subscription
[[./rally-subscription-info.png]]

* Interactive functions
** bug-cache-clear
Clear cached data, either globally, or -- when called with prefix argument -- for a particular instance.
** bug-login (/Bugzilla/)
Explicitely log in to a Bugzilla instance.
** bug-logout (/Bugzilla/)
Explicitely log out from a Bugzilla instance.
** bug-open
   :PROPERTIES:
   :CUSTOM_ID: bug-open
   :END:
Open a single bug, taking the /internal/ bug ID as argument. For Bugzilla the internal and user visible bug ID are identical, while for Rally the user friendly ID (like "US123") and the internal bug ID don't match.

For bug trackers like Rally you can use =bug-search= with a bug reference as argument, which will resolve the internal ID, and open it via =bug-open=, at the cost of one additional API call.
** bug-rally-subscription (/Rally/)
Entry point to [[#bug-rally-subscription-mode][bug-rally-subscription-mode]]
** bug-search
Search for bugs, and display them in [[#bug-list-mode][bug-list-mode]]. The exact behavior depends on the bug tracker used.

Bugzilla supports
- free form text query
- key-value (e.g. "component:Test")
- the name of a named search

Rally supports
- free form text query
- complex query in Rally query syntax

Both Bugzilla and Rally directly open a bug view instead of a list if the search term matches a bug identifier, or the search only returned a single result.
** bug-search-multiple (/Bugzilla/)
Search for bugs with multiple criteria. Same query format as bug-search.
** bug-stored-bugs
Open a list of locally stored bugs.

* Customization
As enduser it's recommended to configure bug-mode using Emacs "Easy Customization Interface", invoked with =M-x customize-group RET bug=:

#+CAPTION: Customization screen
[[./bug-mode-customization.png]]

The easiest way to change the faces used in bug mode is via =M-x customize-group RET bug-faces=:

#+CAPTION: Customization screen for faces
[[./bug-mode-customization-faces.png]]

* org-mode integration
To enable basic org-mode integration do a =(require 'org-bug)= /after/ initializing bug-mode. This will provide two hyperlink types for use in org-mode. The format for both types is <bug tracker instance>/<bug identifier>. The instance identifier may not be omitted.

The =bug= link type provides a link to a single bug, requiring a unique identifier. For Rally a link could look like this: =bug::test-rally/adff50be-40ec-4739-8615-d77ac5429bac=.

The =bug-search= link type provides a link to a bug search. For Rally this can be used to easily link to a user friendly bug name, like this: =bug::test-rally/US2=. A simple text search could be done like this: =bug-search::test-rally/may get eaten=.

The org-mode integration supports [[http://orgmode.org/manual/Capture.html][org-capture]] from bug-mode and bug-list-mode (=search result) buffers. Calling =org-capture= anywhere in a bug-mode buffer will capture a link to the bug. Calling =org-capture= in a bug-list-mode buffer will capture a link to the bug at point.

* Proxy use
HTTPS proxy support in emacs has been broken for quite a while, for details read
[[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=11788][bug 11788]]. As a result, doing something like the following will at best lead to
interesting results if your bug tracker is only reachable via https for
authenticated operations (which it should be):

#+BEGIN_SRC emacs-lisp
(setq url-proy-services
      '(("no_proxy" . "^\\((localhost\\|10.*\\)")
        ("http" . "a.proxy.example")
        ("https" . "a.proxy.example")))
#+END_SRC

There are multiple possible workarounds, some of them are documented here in
order of desirability.

** Patch url
A patched version of url is included for emacs 24.5. You can start using
it by setting =bug-patched-url= to =t=. The changes should not interfere
with other packages (apart from fixing https proxy use for them as well),
and if no patched version was found matching your emacs it just falls back
to the default url package -- setting this option should have no negative
impact.

If you're using emacs 25 you can just grab the patch from git
(=2d1a6054b161bd1055d4feb11c8c5ac95543f5db=) and apply it.

** Use port forwarding
If your proxy allows using =CONNECT=, and you have a suitable shell host
available you can use this to forward a local port to Rally, bypassing the
whole proxy mess. An example entry for =~/.ssh/config= could look like this:

#+BEGIN_SRC
Host rally-forward
    ProxyCommand /usr/bin/connect-proxy -H a.proxy.example:8080 a.shellhost.example 443
    LocalForward 9900 rally1.rallydev.com:443
#+END_SRC

Additionally =/etc/hosts= needs =rally1.rallydev.com= added after =127.0.0.1=
to have it resolve to localhost, and the URL bug-mode uses to access Rally needs
to be adjusted to include the locally bound port:

#+BEGIN_SRC emacs-lisp
(setq bug-rally-url "https://rally1.rallydev.com:9900/slm/webservice/v2.0/")
#+END_SRC

After starting a SSH connection (=ssh rally-forward=) you should be able to use
 bug-mode without issues.

** Use a proxy aware TLS program
OpenSSL's s_client [[https://rt.openssl.org/Ticket/Display.html?id=2651&user=guest&pass=guest][gained proxy support in trunk]]. Assuming your network allows
host resolution it might be possible to use this as workaround:

#+BEGIN_SRC emacs-lisp
;; disable builtin gnutls
(if (fboundp 'gnutls-available-p)
    (fmakunbound 'gnutls-available-p))

;; set openssl compiled from trunk as tls-program
(setf tls-program
      '("openssl-trunk s_client -connect %h:%p -proxy a.proxy.example:8080 -ign_eof"))
#+END_SRC

Note that this will bypass the whole noproxy logic, so if you're using tls in
the local network without proxy as well this will break things.

* Rich text formatting
Rally supports "Rich Text" (they mean "HTML") for some fields. While for most of the options the value is questionable, and looks more like "Look! We can do fancy text too!", the list formatting and the option to emphasize text using bold/italics/underline are quite useful. Even though a few more formatting options are supported you should limit yourself to those.

A rendering of a bug using /all/ of Rallys Rich Text elements looks like this:

#+CAPTION: Rendering of all Rally Rich Text elements
[[./rally-bug-richtext.png]]
* Related modes and modules
** [[https://github.com/seanleblanc/rally-mode][rally-mode]]
** [[http://www.jemarch.net/git/bugz-mode.git/][bugz-mode]]
A mode for using Bugzilla, wrapping the pybugz utility. Of limited use, as
pybugz is rather picky about which Bugzilla instances it likes to work with.
** [[https://github.com/sigma/gh.el][gh.el]]
A library wrapping most of GitHubs API. For adding GitHub issues to bug-mode
just directly querying the GitHub API might be easier.
** [[https://github.com/mattdeboard/jira-rest][jira-rest]]
A library for using Jiras REST API.
