* bug-mode manual
** Installation
** Modes
*** Generic modes
**** bug-mode
**** bug-list-mode
*** Rally specific modes
**** bug-rally-subscription-mode
Use the `bug-rally-subscription' function to display details about your Rally subscription.
#+CAPTION: Sample output for a Rally subscription
[[./rally-subscription-info.png]]
** Customization
** Proxy use
HTTPS proxy support in emacs has been broken for quite a while, for details read
[[https://debbugs.gnu.org/cgi/bugreport.cgi?bug=11788][bug 11788]]. As a result, doing something like the following will at best lead to
interesting results if your bug tracker is only reachable via https for
authenticated operations (which it should be):

#+BEGIN_SRC emacs-lisp
(setq url-proy-services
      '(("no_proxy" . "^\\((localhost\\|10.*\\)")
        ("http" . "a.proxy.example")
        ("https" . "a.proxy.example")))
#+END_SRC

There are multiple possible workarounds, some of them are documented here in
order of desirability.

*** Patch url
A patched version of url is included for emacs 24.5. You can start using
it by setting =bug-patched-url= to =t=. The changes should not interfere
with other packages (apart from fixing https proxy use for them as well),
and if no patched version was found matching your emacs it just falls back
to the default url package -- setting this option should have no negative
impact.

If you're using emacs 25 you can just grab the patch from git
(=2d1a6054b161bd1055d4feb11c8c5ac95543f5db=) and apply it.

*** Use portforwarding
If your proxy allows using =CONNECT=, and you have a suitable shell host
available you can use this to forward a local port to Rally, bypassing the
whole proxy mess. An example entry for =~/.ssh/config= could look like this:

#+BEGIN_SRC
Host rally-forward
    ProxyCommand /usr/bin/connect-proxy -H a.proxy.example:8080 a.shellhost.example 443
    LocalForward 9900 rally1.rallydev.com:443
#+END_SRC

Additionally =/etc/hosts= needs =rally1.rallydev.com= added after =127.0.0.1=
to have it resolve to localhost, and the URL bug-mode uses to access Rally needs
to be adjusted to include the locally bound port:

#+BEGIN_SRC emacs-lisp
(setq bug-rally-url "https://rally1.rallydev.com:9900/slm/webservice/v2.0/")
#+END_SRC

After starting a SSH connection (=ssh rally-forward=) you should be able to use
 bug-mode without issues.

*** Use a proxy aware TLS program
OpenSSL's s_client [[https://rt.openssl.org/Ticket/Display.html?id=2651&user=guest&pass=guest][gained proxy support in trunk]]. Assuming your network allows
host resolution it might be possible to use this as workaround:

#+BEGIN_SRC emacs-lisp
;; disable builtin gnutls
(if (fboundp 'gnutls-available-p)
    (fmakunbound 'gnutls-available-p))

;; set openssl compiled from trunk as tls-program
(setf tls-program
      '("openssl-trunk s_client -connect %h:%p -proxy a.proxy.example:8080 -ign_eof"))
#+END_SRC

Note that this will bypass the whole noproxy logic, so if you're using tls in
the local network without proxy as well this will break things.

** Rich text formatting
Rally supports "Rich Text" (they mean "HTML") for some fields. While for most of the options the value is questionable, and looks more like "Look! We can do fancy text too!", the list formatting and the option to emphasize text using bold/italics/underline are quite useful. Even though a few more formatting options are supported you should limit yourself to those.

A rendering of a bug using /all/ of Rallys Rich Text elements looks like this:

#+CAPTION: Rendering of all Rally Rich Text elements
[[./rally-bug-richtext.png]]
** Related modes and modules
*** [[https://github.com/seanleblanc/rally-mode][rally-mode]]
*** [[http://www.jemarch.net/git/bugz-mode.git/][bugz-mode]]
A mode for using Bugzilla, wrapping the pybugz utility. Of limited use, as
pybugz is rather picky about which Bugzilla instances it likes to work with.
*** [[https://github.com/sigma/gh.el][gh.el]]
A library wrapping most of Githubs API. For adding Github issues to bug-mode
just directly querying the Github API might be easier.
*** [[https://github.com/mattdeboard/jira-rest][jira-rest]]
A library for using Jiras REST API.
